import com.github.spotbugs.snom.SpotBugsTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'

    // 추가: 코드 품질 도구
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.26'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'io.github.RaonJena99'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
    // Spring Boot BOM이 적용된 상태에서 개별 항목만 재정의
    dependencies {
        dependency 'org.apache.commons:commons-lang3:3.19.0' // CVE 회피(>=3.18.0)
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0' // Spring MVC용
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

    // test를 위한 dependency
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2' // 테스트용 H2 추가
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT 인증
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('test') {
	useJUnitPlatform()
}

/* -------------------- 코드 품질 설정 -------------------- */

// 포맷팅: Spotless
spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat()    // Google Java Style
        removeUnusedImports() // 안 쓰는 import 제거
        importOrder()         // 기본 import 정렬
    }
}

// Checkstyle (규칙 파일 쓰면 주석 해제)
checkstyle {
    toolVersion = '10.18.1'
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
}

// SpotBugs 보고서(html) 세팅
spotbugs {
    excludeFilter = file("$rootDir/config/spotbugs/exclude.xml")
}

tasks.withType(SpotBugsTask).configureEach {
    reports {
        html {
            required.set(true)
            // RegularFileProperty 로 설정해야 함
            outputLocation.set(layout.buildDirectory.file("reports/spotbugs/${name}.html"))
        }
        // 필요 없으면 다른 포맷 끄기(선택)
        xml.required.set(false)
        text.required.set(false)
        sarif.required.set(false)
    }
}

// check 시 정적분석도 같이 돌리기
tasks.named('check') {
    dependsOn 'spotbugsMain', 'spotbugsTest', 'checkstyleMain', 'checkstyleTest'
}

// 커밋 전 한 방에 검사하는 태스크
tasks.register('preCommit') {
    group = 'verification'
    description = 'Run formatting check, static analysis and tests for pre-commit.'
    dependsOn(
            'spotlessCheck',
            'checkstyleMain', 'checkstyleTest',
            'spotbugsMain', 'spotbugsTest',
            'test'
    )
}
